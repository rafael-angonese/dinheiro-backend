// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // output   = "../dist/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  refreshTokens RefreshToken[]

  bankAccounts BankAccount[]
  transactions Transaction[]

  @@map("users")
}

model RefreshToken {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @map("user_id")
  token     String
  valid     Boolean
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("refresh_tokens")
}

model BankAccount {
  id        String   @id @default(uuid())
  name      String
  balance   Float
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  transactions       Transaction[]

  @@map("bank_accounts")
}

enum CategoryType {
  CREDIT
  DEBIT
}

model Category {
  id        String       @id @default(uuid())
  name      String
  type      CategoryType @default(CREDIT)
  createdAt DateTime     @default(now()) @map("created_at")
  updatedAt DateTime     @updatedAt @map("updated_at")

  transactions Transaction[]

  @@map("categories")
}

model Transaction {
  id          String   @id @default(uuid())
  date        DateTime
  description String
  amount      Float
  type        String

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String   @map("category_id")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  bankAccountId String      @map("bank_account_id")
  bankAccount   BankAccount @relation(fields: [bankAccountId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  transactionFiles TransactionFiles[]

  @@map("transactions")
}

model File {
  id           String   @id @default(uuid())
  name         String
  originalName String?  @map("original_name")
  size         Float
  contentType  String   @map("content_type")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  fileOnTransactions TransactionFiles[]

  @@map("files")
}

model TransactionFiles {
  id            String      @id @default(uuid())
  file          File        @relation(fields: [fileId], references: [id])
  fileId        String      @map("file_id")
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId String      @map("transaction_id")
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")

  @@map("transaction_files")
}
